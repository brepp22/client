---
import Dropdown from "../components/Dropdown.astro";

let citySelect = [
  'Austin', 'Boston', 'Chicago', 'Columbus', 'Dallas',
  'Denver', 'Detroit', 'El Paso', 'Fort Worth', 'Houston',
  'Indianapolis', 'Jacksonville', 'Las Vegas', 'Los Angeles', 'Memphis',
  'Miami', 'Nashville', 'New Orleans', 'New York', 'Oklahoma City',
  'Philadelphia', 'Phoenix', 'Portland', 'San Antonio', 'San Diego', 'San Francisco',
  'Seattle', 'Tucson', 'Virginia Beach', 'Washington'
];



---
<div id ='weather-search'>
    <input
        id="weather-input" class="w-full p-2 rounded-md border-gray-500 text-black h-12 mt-2 text-sm"
        placeholder="Search Weather by City's Name..."
    />

    <button id="search-button" class="dark:text-black bg-gray-800 dark:bg-slate-400 w-full p-2 mt-2 rounded-md h-10 text-base hover:text-blue-400 dark:hover:text-blue-900">Search</button>
   
</div>

<Dropdown  title={"Select a City"} items={citySelect}/>

<div id="weather-info" class="mt-4 text-center text-white font-mono bg-slate-800 dark:text-black dark:bg-slate-400">
    <p>Choose a city to see the weather...</p>
</div>

<script type="module">
    const fetchWeatherData = async (locationInput) => {
    const weatherInfo = document.getElementById('weather-info');
    
    const locationParts = locationInput.replace(/,/g, '').trim().split(/\s+/); 
    const cityName = locationParts.length === 1 ? locationParts[0] : locationParts.slice(0, -1).join(' '); 
    const userState = locationParts.length > 1 ? locationParts[locationParts.length - 1].toLowerCase() : null; 
    
    const cityCode = encodeURIComponent(cityName);
    
    try {
        const response = await fetch(`https://wttr.in/${cityCode}?format=j1`);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();

        const apiCityName = data.nearest_area[0].areaName[0].value;
        const apiState = data.nearest_area[0].region[0].value; 

        console.log(`API City: ${apiCityName}, API State: ${apiState}`);

       
        if (
            cityName.toLowerCase() !== apiCityName.toLowerCase() || 
            (userState && userState !== apiState.toLowerCase()) 
        ) {
            throw new Error(`No City Found Matching "${locationInput}"`);
        }

        // Current Weather
        const current = data.current_condition[0];
        const weatherDescription = current.weatherDesc[0].value;
        const weatherEmoji = getWeatherEmoji(weatherDescription);

        // Daily Forecast (next 3 days)
        const dailyForecast = data.weather.slice(0, 3).map(day => `
            <div class="daily-forecast bg-slate-700 rounded-lg p-4 mb-2 text-lg dark:text-black dark:bg-slate-300">
                <h3 class="text-lg font-bold">${formatDate(day.date)}</h3>
                <p>Average Temp: ${day.avgtempF} °F </p>
                <p>Weather: ${getWeatherEmoji(day.hourly[0].weatherDesc[0].value)} ${day.hourly[0].weatherDesc[0].value}</p>
                <p>Sunrise: ${day.astronomy[0].sunrise} | Sunset: ${day.astronomy[0].sunset}</p>
            </div>
        `).join('');

        weatherInfo.innerHTML = `
            <h2 class="weather-title text-2xl font-mono font-bold mt-4 mb-4 dark:text-black">${apiCityName}, ${apiState}</h2>
            <p class="text-white font-mono text-lg dark:text-black">Current Temperature: ${current.temp_F} °F</p>
            <p class="text-white font-mono text-lg dark:text-black">Feels Like: ${current.FeelsLikeF} °F</p>
            <p class="text-white font-mono text-lg dark:text-black">
                Weather Description: ${weatherEmoji} ${weatherDescription.trim()}
            </p>
            <p class="text-white font-mono text-lg dark:text-black">Humidity: ${current.humidity}%</p>
            <p class="text-white font-mono text-lg dark:text-black">Wind Speed: ${current.windspeedMiles} mph</p>
            <div class="daily-forecasts mt-6">
                <h3 class="text-lg font-bold text-white dark:text-black">3-Day Forecast</h3>
                ${dailyForecast}
            </div>
        `;
    } catch (err) {
        console.error('Fetch error:', err.message);
        weatherInfo.innerHTML = `<p class="text-white">Cannot Find Weather For "${locationInput}"</p>`;
    }
};
    const handleSelection = (event) => {
        const selectedValue = event.target.getAttribute('data-value'); 
        if (selectedValue) {
            fetchWeatherData(selectedValue); 
        }
    };

    document.addEventListener("DOMContentLoaded", () => {
        const dropdownItems = document.querySelectorAll(".dropdown-item"); 
        dropdownItems.forEach(item => {
            item.addEventListener("click", handleSelection); 
        });
    });

    const getWeatherEmoji = (description) => {
        switch (description.trim().toLowerCase()) {
            case 'clear': return '☀️';
            case 'sunny': return '🌞';
            case 'rainy': return '🌧️';
            case 'cloudy': return '☁️';
            case 'overcast': return '☁️';
            case 'mist': return '🌫️';
            case 'partly cloudy': return '⛅';
            case 'thunderstorm': return '⛈️';
            case 'snow': return '❄️';
            case 'fog': return '🌫️';
            case 'windy': return '💨';
            default: return '☀️';
        }
    };

    const formatDate = (dateString) => {
    const [year, month, day] = dateString.split('-'); 
    return `${month}-${day}-${year}`; 
};
document.addEventListener("DOMContentLoaded", () => {
        const dropdownItems = document.querySelectorAll(".dropdown-item"); 
        dropdownItems.forEach(item => {
            item.addEventListener("click", handleSelection); 
        });
    });

document.addEventListener("DOMContentLoaded", () => {
  const searchButton = document.getElementById("search-button");
  const weatherInput = document.getElementById("weather-input");
searchButton.addEventListener("click", () => {
    const searchQuery = weatherInput.value.trim();
    if(searchQuery !== '') {
      fetchWeatherData(searchQuery);
    } else {
      throw new Error("Please enter a city or zip code");
    }
  });
weatherInput.addEventListener("keyup", (event) => {
    if(event.key === "Enter") {
      const searchQuery = weatherInput.value.trim();
      if(searchQuery !== '') {
        fetchWeatherData(searchQuery);
      } else {
        alert("Please enter a city or zip code");
      }
    }
  });
});

</script>


<style>
     #weather-info {
        height: 800px;
        width: 600px;
        margin: 50px auto; 
        padding: 20px; 
        border-radius: 10px; 
        display: flex; 
        justify-content: center; 
        align-items: center; 
        flex-direction: column; 
        overflow-y: auto;
        font-size: 1.5rem;
    }

  
    #weather-info p {
        margin: 10px 0; 
        font-size: 25px;
    }

    #weather-input{
        font-family: monospace;
        padding: 8px;
        border-radius: 10px;
        max-height: 400px;
        max-width: 320px;
    }

    #search-button{
        display:flex;
        justify-content: center;
        font-family: monospace;
        padding: 8px;
        border-radius: 10px;
        max-height: 400px;
        max-width: 320px;
    }

    #weather-search{
        display: flex;
        justify-content: center;
        flex-direction: column;
        align-items:center;
    }

    @media (max-width: 600px){
    #weather-info {
            width: 95%; 
            max-width: 95%; 
            margin: 10px auto;
            padding: 15px;
            overflow: auto; 
        }
    }
   

   
</style>