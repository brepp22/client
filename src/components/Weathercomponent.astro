---
import Dropdown from "../components/Dropdown.astro";

let citySelect = [
  'Austin', 'Boston', 'Chicago', 'Columbus', 'Dallas',
  'Denver', 'Detroit', 'El Paso', 'Fort Worth', 'Houston',
  'Indianapolis', 'Jacksonville', 'Las Vegas', 'Los Angeles', 'Memphis',
  'Miami', 'Nashville', 'New Orleans', 'New York', 'Oklahoma City',
  'Philadelphia', 'Phoenix', 'Portland', 'San Antonio', 'San Diego', 'San Francisco',
  'Seattle', 'Tucson', 'Virginia Beach', 'Washington'
];



---
<div id ='weather-search'>
    <input
        id="weather-input"
        placeholder="search..."
    />

    <button id="search-button" class="text-red-600 bg-slate-400"> Click Me</button>
   
</div>

<Dropdown  items={citySelect}/>

<div id="weather-info" class="mt-4 text-center text-white font-mono bg-slate-800 dark:text-black dark:bg-slate-400">
    <p>Choose a city to see the weather...</p>
</div>

<script type="module">
    const fetchWeatherData = async (cityName) => {
        const weatherInfo = document.getElementById('weather-info');
        const cityCode = encodeURIComponent(cityName);
        
        try {
            const response = await fetch(`https://wttr.in/${cityCode}?format=j1`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const data = await response.json();

            console.log('Weather Data:', data);
            
            // Current Weather
            const current = data.current_condition[0];
            const weatherDescription = current.weatherDesc[0].value;
            const weatherEmoji = getWeatherEmoji(weatherDescription);

            // Daily Forecast (next 3 days)
            const dailyForecast = data.weather.slice(0, 3).map(day => `
                <div class="daily-forecast bg-slate-700 rounded-lg p-4 mb-2 text-lg dark:text-black dark:bg-slate-300">
                    <h3 class="text-lg font-bold">${formatDate(day.date)}</h3>
                    <p>Average Temp: ${day.avgtempF} °F </p>
                    <p>Weather: ${getWeatherEmoji(day.hourly[0].weatherDesc[0].value)} ${day.hourly[0].weatherDesc[0].value}</p>
                    <p>Sunrise: ${day.astronomy[0].sunrise} | Sunset: ${day.astronomy[0].sunset}</p>
                </div>
            `).join('');

            weatherInfo.innerHTML = `
                <h2 class="weather-title text-2xl font-mono font-bold mt-4 mb-4 dark:text-black">${cityName}</h2>
                <p class="text-white font-mono text-lg dark:text-black">Current Temperature: ${current.temp_F} °F</p>
                <p class="text-white font-mono text-lg dark:text-black">Feels Like: ${current.FeelsLikeF} °F</p>
                <p class="text-white font-mono text-lg dark:text-black">
                    Weather Description: ${weatherEmoji} ${weatherDescription.trim()}
                </p>
                <p class="text-white font-mono text-lg dark:text-black">Humidity: ${current.humidity}%</p>
                <p class="text-white font-mono text-lg dark:text-black">Wind Speed: ${current.windspeedMiles} mph</p>
                <div class="daily-forecasts mt-6">
                    <h3 class="text-lg font-bold text-white dark:text-black">3-Day Forecast</h3>
                    ${dailyForecast}
                </div>
            `;
        } catch (err) {
            console.error('Fetch error:', err);
            weatherInfo.innerHTML = `<p class="text-white">Error fetching data: ${err.message}</p>`;
        }
    };

    const handleSelection = (event) => {
        const selectedValue = event.target.getAttribute('data-value'); 
        if (selectedValue) {
            fetchWeatherData(selectedValue); 
        }
    };

    document.addEventListener("DOMContentLoaded", () => {
        const dropdownItems = document.querySelectorAll(".dropdown-item"); 
        dropdownItems.forEach(item => {
            item.addEventListener("click", handleSelection); 
        });
    });

    const getWeatherEmoji = (description) => {
        switch (description.trim().toLowerCase()) {
            case 'clear': return '☀️';
            case 'sunny': return '🌞';
            case 'rainy': return '🌧️';
            case 'cloudy': return '☁️';
            case 'overcast': return '☁️';
            case 'mist': return '🌫️';
            case 'partly cloudy': return '⛅';
            case 'thunderstorm': return '⛈️';
            case 'snow': return '❄️';
            case 'fog': return '🌫️';
            case 'windy': return '💨';
            default: return '☀️';
        }
    };

    const formatDate = (dateString) => {
    const [year, month, day] = dateString.split('-'); 
    return `${month}-${day}-${year}`; 
};
document.addEventListener("DOMContentLoaded", () => {
        const dropdownItems = document.querySelectorAll(".dropdown-item"); 
        dropdownItems.forEach(item => {
            item.addEventListener("click", handleSelection); 
        });
    });

document.addEventListener("DOMContentLoaded", () => {
  const searchButton = document.getElementById("search-button");
  const weatherInput = document.getElementById("weather-input");
searchButton.addEventListener("click", () => {
    const searchQuery = weatherInput.value.trim();
    if(searchQuery !== '') {
      fetchWeatherData(searchQuery);
    } else {
      alert("Please enter a city or zip code");
    }
  });
weatherInput.addEventListener("keyup", (event) => {
    if(event.key === "Enter") {
      const searchQuery = weatherInput.value.trim();
      if(searchQuery !== '') {
        fetchWeatherData(searchQuery);
      } else {
        alert("Please enter a city or zip code");
      }
    }
  });
});

</script>


<style>
     #weather-info {
        height: 800px;
        width: 600px;
        margin: 50px auto; 
        padding: 20px; 
        border-radius: 10px; 
        display: flex; 
        justify-content: center; 
        align-items: center; 
        flex-direction: column; 
        overflow-y: auto;
        font-size: 1.5rem;
    }

  
    #weather-info p {
        margin: 10px 0; 
        font-size: 25px;
    }

    @media (max-width: 600px){
    #weather-info {
            width: 95%; 
            max-width: 95%; 
            margin: 10px auto;
            padding: 15px;
            overflow: auto; 
        }
    }
   

   
</style>