---
interface Props {
    title?: string;
    details?: string;
    link?: string;
}

const { title, details, link } = Astro.props;

const detailsArray = details?.split('\n');
const linksArray = link ? link.split('\n') : [];
---

<div class="accordion group relative border-box">
    <button
      class="accordion_button flex w-full flex-1 items-center justify-between gap-2 p-3 text-left font-medium transition text-white hover:text-blue-400 sm:px-4"
      type="button"
      id={`${title}-accordion-button`} 
      aria-expanded="false"
      aria-controls={`${title}-accordion-content`} 
    >
      {title}
      <span class="accordion-icon">+</span> 
    </button>

    <div
      id={`${title}-accordion-content`} 
      aria-labelledby={`${title}-accordion-button`} 
      class="accordion_content hidden max-h-0 overflow-hidden px-3 transition-all duration-300 ease-in-out sm:px-4 text-white border-box"
    >
    {detailsArray?.map((detail, index) => (
      <p class="mb-0 mt-0 max-w-full transition-[height]">
          {linksArray[index] ? (
              <a href={linksArray[index]} class="text-white font-mono hover:text-blue-400 py-2">{detail}</a>
          ) : (
              detail
          )}
      </p>
  ))}
    </div>
</div>

<script>

  document.addEventListener('DOMContentLoaded', () => {
    const buttons = document.querySelectorAll('.accordion_button') as NodeListOf<HTMLButtonElement>;
    const accordionContainer = document.querySelector('.accordion-container'); 

    if (!buttons.length || !accordionContainer) {
           console.error('Accordion buttons or container not found.');
           return;
        }

    buttons.forEach(button => {
      button.addEventListener('click', (event) => {
        event.stopPropagation();

        const content = button.nextElementSibling as HTMLElement | null; 
        const isExpanded = button.getAttribute('aria-expanded') === 'true';

        buttons.forEach(otherButton => {
          if (otherButton !== button) {
            const otherContent = otherButton.nextElementSibling;
            otherButton.setAttribute('aria-expanded', 'false');
            otherContent?.classList.add('hidden');
            const otherIcon = otherButton.querySelector('.accordion-icon');
            if(otherIcon) otherIcon.textContent = '+'; 
          }
        });
    
        if (content) { 
          if (isExpanded) {
            content.classList.add('hidden');
            content.style.maxHeight = '0'; 
          } else {
            content.classList.remove('hidden');
            content.style.maxHeight = content.scrollHeight + 'px'; 
          }
          button.setAttribute('aria-expanded', (!isExpanded).toString());

          const icon = button.querySelector('.accordion-icon');
          if (icon) icon.textContent = isExpanded ? '+' : '-';
        }
      });
    });


    document.addEventListener('click', () => {
      buttons.forEach(button => {
        const content = button.nextElementSibling as HTMLElement | null;
        if (content && button.getAttribute('aria-expanded') === 'true') {
          button.setAttribute('aria-expanded', 'false');
          content?.classList.add('hidden');
          content.style.maxHeight = '0'; 
          const icon = button.querySelector('.accordion-icon');
         if(icon) icon.textContent = '+'; 
        }
      });
    });
  });

</script>
