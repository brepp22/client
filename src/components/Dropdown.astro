---
interface Props {
    title?: string;
    items: string[];
    links?: string[];
    onSearch? : (query: string) => void;
}


const { title, items = [], links = [], onSearch  } = Astro.props;

let searchQuery ='';
---

<div class="dropdown relative flex justify-center">
    <button class="dropdown-button mt-2 p-2 rounded-md bg-gray-800 dark:bg-slate-400 text-white dark:text-black w-[320px] h-12 font-mono hover:text-blue-400 dark:hover:text-blue-900"
        aria-haspopup="true"
        aria-expanded="false"
    >
        {title || 'Select an Option'}
    </button>

    <div class="dropdown-menu hidden">

        <div class="dropdown-search mb-2">
            { onSearch && (
               <input
                type="text"
                id="search-input"
                class="w-full p-2 rounded-lg border bg-gray-700 text-white focus:outline-none"
                placeholder="Search"
                value={searchQuery}
            /> 
            )}
            
        </div>


        
        {items.map((item:string, index:number) => (
            <div class="dropdown-item text-white"  data-value={item}>
                {links[index] ? (
                    <a href={links[index]} class="block">{item}</a>
                ) : (
                    <span>{item}</span>
                )}
            </div>
        ))}
    </div>
</div>

<!-- <script>


    document.addEventListener('DOMContentLoaded', () => {
        const dropdowns = document.querySelectorAll('.dropdown');

        dropdowns.forEach((dropdown) => {
            let isOpen = false; 
            let selectedValue = ''; 
            let searchQuery='';

            const button = dropdown.querySelector('.dropdown-button') as HTMLButtonElement | null;
            const dropdownMenu = dropdown.querySelector('.dropdown-menu') as HTMLElement | null;
            const searchInput = dropdown.querySelector('#search-input') as HTMLInputElement | null;
           

            //const onSearch = dropdown.getAttribute('data-onSearch') as ((query:string) => void) | null;
            const dropdownElement = dropdown as HTMLElement;
            const onSearch = dropdownElement.dataset.onSearch ? JSON.parse(dropdownElement.dataset.onSearch) : (query: string) => {
                console.log('Search function is not provided, but here is the default search:', query);
            };

            if (button && dropdownMenu) {
                button.addEventListener('click', (event) => {
                    event.stopPropagation(); 
                    isOpen = !isOpen; 
                    dropdownMenu.classList.toggle('hidden', !isOpen);
                    button.textContent = isOpen ? 'Close' : selectedValue || 'Select an Option';
                });

                dropdownMenu.addEventListener('click', (event) => {
                    const target = event.target as HTMLElement | null;
                    const dropdownItem = target?.closest('.dropdown-item') as HTMLElement | null;

                    if (dropdownItem) {
                        selectedValue = dropdownItem.dataset.value || '';
                        isOpen = false; 
                        button.textContent = selectedValue || 'Select an Option';
                        dropdownMenu.classList.add('hidden');
                    }
                });

                console.log(searchInput)
                console.log(onSearch)

                if (searchInput) {
                searchInput.addEventListener('input', (e) => {
                    searchQuery = (e.target as HTMLInputElement).value;
                    console.log('search query', searchQuery)
                    if (onSearch) {
                        onSearch(searchQuery); 
                        console.log(searchInput)
                    }
                });

                // Keydown event handler for 'Enter' key
                searchInput.addEventListener('keydown', (e: KeyboardEvent) => {
                    if (e.key === 'Enter' && onSearch) {
                        e.preventDefault(); // Prevent default action for 'Enter'
                        console.log('ENTER')
                        onSearch(searchQuery); // Trigger search on Enter key
                    }
                });
            }
                document.addEventListener('click', (event) => {
                    if (isOpen && dropdownMenu && !dropdownMenu.contains(event.target as Node) && button && !button.contains(event.target as Node)) {
                        isOpen = false;
                        dropdownMenu.classList.add('hidden');
                        button.textContent = selectedValue || 'Select an Option';
                    }
                });
            }
        });
    });

</script> -->

<script>

    document.addEventListener('DOMContentLoaded', () => {
        const dropdowns = document.querySelectorAll('.dropdown');

        dropdowns.forEach((dropdown) => {
            let isOpen = false;
            let selectedValue = '';
            let searchQuery = '';
            const button = dropdown.querySelector('.dropdown-button');
            const dropdownMenu = dropdown.querySelector('.dropdown-menu');
            const searchInput = dropdown.querySelector('#search-input');
            let items = dropdown.querySelectorAll('.dropdown-item');
            const onSearch = dropdown.dataset.onsearch ? JSON.parse(dropdown.dataset.onsearch) : null;

            
            // Function to handle the search input
            const handleSearch = () => {
                if (searchInput) {
                    searchQuery = searchInput.value.toLowerCase();
                    // Filter items based on the search query
                    items.forEach(item => {
                        const itemText = item.textContent.toLowerCase();
                        if (itemText.includes(searchQuery)) {
                            item.classList.remove('hidden');
                        } else {
                            item.classList.add('hidden');
                        }
                    });

                    // Trigger onSearch callback if provided
                    if (onSearch) {
                        onSearch(searchQuery);
                    }
                }
            };

            // Toggle dropdown visibility
            button?.addEventListener('click', (event) => {
                event.stopPropagation();
                isOpen = !isOpen;
                dropdownMenu.classList.toggle('hidden', !isOpen);
                button.textContent = isOpen ? 'Close' : selectedValue || 'Select an Option';
            });

            // Handle item selection
            dropdownMenu?.addEventListener('click', (event) => {
                const target = event.target.closest('.dropdown-item');
                if (target) {
                    selectedValue = target.dataset.value || '';
                    isOpen = false;
                    button.textContent = selectedValue || 'Select an Option';
                    dropdownMenu.classList.add('hidden');
                }
            });

            // Handle search input event
            if (searchInput) {
                searchInput.addEventListener('input', handleSearch);
            }

            // Close the dropdown when clicking outside
            document.addEventListener('click', (event) => {
                if (isOpen && !dropdown.contains(event.target)) {
                    isOpen = false;
                    dropdownMenu.classList.add('hidden');
                    button.textContent = selectedValue || 'Select an Option';
                }
            });
        });
    });
</script>

<style>
    .dropdown-menu {
        position: absolute; 
        width: 100%;
        background: #454978; 
        border: 1px solid gray; 
        z-index: 1000; 
        font-family: monospace;
        padding: 8px;
        border-radius: 10px;
        max-height: 400px;
        max-width: 320px;
        overflow-y: auto;
      
    }

    .dropdown-menu::-webkit-scrollbar {
        width: 8px;
    }

    .dropdown-menu::-webkit-scrollbar-thumb {
        background-color: white; 
        border-radius: 10px; 
    }

    .dropdown-menu::-webkit-scrollbar-thumb:hover {
        background-color: #555; 
    }

    .dropdown-menu::-webkit-scrollbar-track {
        background: #454978; 
        border-radius: 10px;
    }


    .dropdown-item {
        padding: 8px; 
        cursor: pointer; 
    }

    .dropdown-item:hover {
        background-color: rgb(115, 126, 174); 
        border-radius: 10px;
    }
    .hidden {
        display: none; 
    }

    @media (max-width: 650px){
        .dropdown-menu{
            width:95%;
            max-width: 95%;
        }
    }

</style>