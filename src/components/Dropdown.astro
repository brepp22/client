---
interface Props {
    title?: string;
    items: string[];
    links?: string[];
}

const { title, items = [], links = [] } = Astro.props;
---

<div class="dropdown relative flex justify-center">
    <button id="dropdown-button" class="mt-2 p-2 rounded-md bg-gray-800 text-white w-[320px] font-mono hover:text-blue-400"
        aria-haspopup="true"
        aria-expanded="false"
    >
        {title || 'Select an Option'}
    </button>
    <div class="dropdown-menu hidden">
        {items.map((item, index) => (
            <div class="dropdown-item" data-value={item}>
                <a href={links[index]}>
                    {item}
                </a>
            </div>
        ))}
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        let isOpen = false; 
        let selectedValue = ''; 

        const button = document.getElementById('dropdown-button') as HTMLButtonElement | null;
        const dropdownMenu = document.querySelector('.dropdown-menu') as HTMLElement | null;

        if (button && dropdownMenu) {
            button.addEventListener('click', (event) => {
                event.stopPropagation(); 
                isOpen = !isOpen; 
                dropdownMenu.classList.toggle('hidden', !isOpen);
                button.textContent = isOpen ? 'Close' : selectedValue || 'Select an Option';
            });

            dropdownMenu.addEventListener('click', (event) => {

              const target = event.target as HTMLElement | null;
              const dropdownItem = target?.closest('.dropdown-item') as HTMLElement | null;

               if (dropdownItem) {
               selectedValue = dropdownItem.dataset.value || '';
               isOpen = false; 
               button.textContent = selectedValue || 'Select an Option';
              dropdownMenu.classList.add('hidden');
             }
          });


        document.addEventListener('click', (event) => {
            if (isOpen && dropdownMenu && !dropdownMenu.contains(event.target as Node) && button && !button.contains(event.target as Node)) {
                isOpen = false;
                dropdownMenu.classList.add('hidden');
                button.textContent = selectedValue || 'Select an Option';
              }
            });
        } 
    });
</script>

<style>
    .dropdown-menu {
        position: absolute; 
        width: 320px;
        background: rgb(164, 173, 215); 
        border: 1px solid gray; 
        z-index: 1000; 
        text: white;
        font-family: monospace;
        padding: 8px;
        border-radius: 10px;
    }

    .dropdown-item {
        padding: 8px; 
        cursor: pointer; 
    }

    .dropdown-item:hover {
        background-color: rgb(140, 148, 183); 
        border-radius: 10px;
    }

    .hidden {
        display: none; 
    }
</style>