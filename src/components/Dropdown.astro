---

interface Props {
    title?: string;
    item1: string;
    item2: string;
    item3: string;
    item4: string;
    item5: string;
}

const { title, item1, item2, item3, item4, item5 } = Astro.props;
---

<div class="dropdown relative flex justify-center">
    <button id="dropdown-button" class="mt-2 p-2 rounded-md bg-gray-800 text-white w-[320px] font-mono  hover:text-blue-400">Select an Option</button>
    <div class="dropdown-menu hidden"> 
        <div class="dropdown-item" data-value={title}>{title}</div>
        <div class="dropdown-item" data-value={item1}>{item1}</div>
        <div class="dropdown-item" data-value={item2}>{item2}</div>
        <div class="dropdown-item" data-value={item3}>{item3}</div>
        <div class="dropdown-item" data-value={item4}>{item4}</div>
        <div class="dropdown-item" data-value={item5}>{item5}</div>
    </div>
</div>

<script>
  
    let isOpen = false; 
    let selectedValue = ''; 


    const button = document.getElementById('dropdown-button') as HTMLButtonElement | null;
    const dropdownItems = document.querySelectorAll('.dropdown-item') as NodeListOf<HTMLElement>;
    const dropdownMenu = document.querySelector('.dropdown-menu') as HTMLElement | null;

   
    if (button && dropdownMenu) {
    button.addEventListener('click', (event) => {
      event.stopPropagation(); 

      isOpen = !isOpen; 

      dropdownMenu.classList.toggle('hidden', !isOpen);

    
      button.textContent = isOpen ? 'Close' : selectedValue || 'Select an Option';
    });
  }

  dropdownItems.forEach((item) => {
    item.addEventListener('click', (event) => {
  
      const target = event.target as HTMLElement;
      selectedValue = target.dataset.value || '';

      isOpen = false; 

      if (button) button.textContent = selectedValue;

      if (dropdownMenu) dropdownMenu.classList.add('hidden');
    });
  });

  document.addEventListener('click', (event) => {
   
    if (isOpen && dropdownMenu && !dropdownMenu.contains(event.target as Node) && button && !button.contains(event.target as Node)) {
      isOpen = false;

      dropdownMenu.classList.add('hidden');
      button.textContent = selectedValue || 'Select an Option';
    }
  });
</script>
</script>

<style>
    .dropdown-menu {
        position: absolute; 
        width: 320px;
        background: rgb(164, 173, 215); 
        border: 1px solid gray; 
        z-index: 1000; 
        text:white;
        font-family: monospace;
        padding:8px;
        border-radius: 10px;
    }

    .dropdown-item {
        padding: 8px; 
        cursor: pointer; 
    }

    .dropdown-item:hover {
        background-color: rgb(140, 148, 183); 
        border-radius: 10px;
    }

    .hidden {
        display: none; 
    }

    @media (max-width: 600px) {
    .dropdown-menu {
        width: 90%; 
        left: 50%; 
        transform: translateX(-50%); 
        padding: 10px; 
    }
    .dropdown-item {
        width: 100%; 
        padding: 10px; 
    }
}

</style>

